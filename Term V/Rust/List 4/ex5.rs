use std::collections::HashSet;

fn sum_pairs(ints: &[i8], s: i8) -> Option<(i8, i8)> {
    let mut xs = HashSet::new();
    for x in ints {
        let x = *x;
        if xs.contains(&(s-x)) {
            return Some((s-x, x));
        } else {
            xs.insert(x);
        }
    }
    None
}

#[test]
fn test1() {
    assert_eq!(sum_pairs(&[78, 68, 40, 63, 22, -91, 15, 16, 89, 49, -62, -49, -91, 88, -52, -98, 16, -52, -77, 48, 18, 20, 91, 71, 28, 35, 27, -85,
     35, -36, 52, 45, 54, 7, 100, 50, -35, -8, -96, 20, 58, -49, 53, -84, -39, -16, 25, -80, 50, -37, -4, 38, -13, -22, 67, 14, 9, -65, 69, 35, 67,
     85, 25, 55, -9, 8, -84, -53, 98, 85, -5, 41, 65, 25, 22, -94, 15, -98, 88, -75, -25, -56, 38, 17, 6, 82, -10, 67, -16, 23, 10, 30, 74, -40,
     -81, 64, 22, -4, 17, 13, 28, 12, -93, 64, -73, -94, -43, 70, -12, -8, -2, -9, -89, 38, 36, -10, -61, 66, 25, -72, 27, -75, -99, 98, -51, 
     -82, -32, -88, -41, 46, 50, 4, 7, 72, 63, -61, -89, -81, 60, 0, 97, 55, 43, 54, -24, -71, -34, 17, -73, -37, 41, -9, 34, -65, 98, 29, -41,
     55, 68, 88, -49, -42, -69, -96, -87, 35, -33, -64, 35, 53, -33, -53, -19, -38, -43, -80, 95, 96, -82, 100, -51, -94, 12, -38, -30], 19),
     Some((68, -49)));
}

#[test]
fn test2() {
    assert_eq!(sum_pairs(&[1, 4, 8, 7, 3, 15], 8), Some((1, 7)));
}

#[test]
fn test3() {
    assert_eq!(sum_pairs(&[1, -2, 3, 0, -6, 1], -6), Some((0, -6)));
}

#[test]
fn test4() {
    assert_eq!(sum_pairs(&[20, -13, 40], -7), None);
}

#[test]
fn test5() {
    assert_eq!(sum_pairs(&[1, 2, 3, 4, 1, 0], 2), Some((1, 1)));
}

#[test]
fn test6() {
    assert_eq!(sum_pairs(&[10, 5, 2, 3, 7, 5], 10), Some((3, 7)));
}

#[test]
fn test7() {
    assert_eq!(sum_pairs(&[4, -2, 3, 3, 4], 8), Some((4, 4)));
}

#[test]
fn test8() {
    assert_eq!(sum_pairs(&[0, 2, 0], 0), Some((0, 0)));
}

#[test]
fn test9() {
    assert_eq!(sum_pairs(&[5, 9, 13, -3], 10), Some((13, -3)));
}

#[test]
fn test10() {
    assert_eq!(sum_pairs(&[-61, 79, 18, -73, -92, 82, -55, -40, 43, -91, 4, -31, 26, -42, 12, -7, 76, -22, 88, -100, 
    36, 12, -8, 42, -95, -74, -68, -7, 100, -12, -9, 44, -15, 51, 82, -34, 6, 13, 68, -37, -12, 8, -46, 88, -49, 45, 
    -39, 92, 94, 59, -70, -37, 86, 34, 27, 87, 12, 60, 78, 65, -22, 99, -6, 46, 92, -99, 45, -33, -32, -95, 30, 92, 
    -35, 28, 72, 18], 5), Some((12, -7)));
}

