fn number(bus_stops:&[(i32,i32)]) -> i32 {
    bus_stops.iter().fold(0, |a, b| a+b.0-b.1)
}

#[test]
fn test0() {
	assert_eq!(number(&[(5, 0), (13, 12), (9, 4), (4, 10), (11, 4), (5, 14), (9, 11), (18, 16), (13, 11), (19, 1)]), 23)
}
#[test]
fn test1() {
	assert_eq!(number(&[(20, 0), (12, 2), (11, 20), (10, 8), (12, 12), (4, 12), (6, 18), (17, 6), (14, 2), (6, 6)]), 26)
}
#[test]
fn test2() {
	assert_eq!(number(&[(12, 0), (16, 20), (20, 10), (14, 13), (7, 6), (20, 17), (11, 7), (1, 20)]), 8)
}
#[test]
fn test3() {
	assert_eq!(number(&[(18, 0), (16, 18), (9, 3), (6, 9), (2, 2), (1, 15), (6, 11)]), 0)
}
#[test]
fn test4() {
	assert_eq!(number(&[(19, 0), (9, 10), (2, 4), (16, 13), (10, 2), (4, 1), (1, 18), (16, 8)]), 21)
}
#[test]
fn test5() {
	assert_eq!(number(&[(4, 0), (13, 15), (19, 8), (11, 18), (3, 7), (10, 1), (14, 4)]), 21)
}
#[test]
fn test6() {
	assert_eq!(number(&[(19, 0), (17, 13), (9, 12), (13, 6), (13, 12), (4, 2), (18, 6), (2, 3)]), 41)
}
#[test]
fn test7() {
	assert_eq!(number(&[(14, 0), (16, 17), (4, 12), (6, 9), (10, 5), (20, 17), (19, 11), (11, 12), (3, 17), (20, 12)]), 11)
}
#[test]
fn test8() {
	assert_eq!(number(&[(20, 0), (10, 13), (17, 20), (17, 12), (14, 5), (9, 2), (17, 3), (19, 17)]), 51)
}
#[test]
fn test9() {
	assert_eq!(number(&[(1, 0), (11, 11), (19, 17), (14, 3), (13, 19), (9, 3), (7, 4)]), 17)
}